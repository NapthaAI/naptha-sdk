def run(module_run: Dict, *args, **kwargs):
    """
    Modified run function that creates and executes the agent.
    If 'func_name' is '{{ obj_name }}', we build the agent and run it
    with the 'description' provided in func_input_data.
    """

    # Parse the input schema
    module_run = AgentRunInput(**module_run)
    module_run.inputs = InputSchema(**module_run.inputs)

    # Check which function we want to call
    func_to_call = globals().get(module_run.inputs.func_name)
    if not func_to_call:
        raise ValueError(f"Function '{module_run.inputs.func_name}' not found.")

    # If func_name requests 'agent_name', create and run the agent
    if module_run.inputs.func_name == "{{ obj_name }}":
        the_agent = {{ obj_name }}()
        user_question = module_run.inputs.func_input_data.get("description", "")
        expected_output = module_run.inputs.func_input_data.get("expected_output", "Analysis results")
        if not user_question:
            return {"error": "No question provided in func_input_data['description']."}
    else:
        # Fallback for other functions
        import inspect
        sig = inspect.signature(func_to_call)
        if len(sig.parameters) == 0:
            return func_to_call()
        else:
            tool_input_class = (
                globals().get(module_run.inputs.input_type)
                if module_run.inputs.input_type else None
            )
            input_data = (
                tool_input_class(**module_run.inputs.func_input_data)
                if tool_input_class else module_run.inputs.func_input_data
            )
            return func_to_call(input_data)

if __name__ == "__main__":
    import asyncio
    from naptha_sdk.client.naptha import Naptha
    from naptha_sdk.configs import setup_module_deployment
    import os

    naptha = Naptha()
    deployment = asyncio.run(
        setup_module_deployment(
            "agent",
            "{{ agent_name }}/configs/deployment.json",
            node_url=os.getenv("NODE_URL"),
            user_id=None,
            load_persona_data=False,
            is_subdeployment=False
        )
    )

    example_inputs = {
        "description": "What is the market cap of AMZN?",
        "expected_output": "The market cap of AMZN"
    }

    input_params = {
        "func_name": "{{ obj_name }}",
        "func_input_data": example_inputs
    }

    module_run = {
        "inputs": input_params,
        "deployment": deployment,
        "consumer_id": naptha.user.id,
        "signature": sign_consumer_id(naptha.user.id, os.getenv("PRIVATE_KEY"))
    }

    response = run(module_run)
    print(response)